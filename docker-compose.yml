---
version: "3.7"

services:

  consul-server:
    image: hashicorp/consul:1.8.10
    container_name: consul-server
    # change restart
    restart: on-failure
    command:
      [
        "consul",
        "agent",
        "-config-file",
        "${CONSUL_CONFIG}",
        "-bind",
        "${HOSTIP}",
        "-advertise",
        "${HOSTIP}",
        # with consul keygen
        "-encrypt",
        "${REDIS_ENCRYPT}"
      ]
    volumes:
      - ./consul:/config
      - /home/vagrant/consul/data:/consul/data
    network_mode: "host"

  redis:
    build:
      context: ./redis/
      dockerfile: Dockerfile
    image: redis-image
    container_name: redis
    restart: always
    depends_on:
      - consul-server
    ports:
      - '0.0.0.0:6379:6379'
    environment:
      - REDIS_REPLICATION_MODE=${REPLICATION}
      - REDIS_MASTER_HOST=${MASTER_HOSTIP}
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      # - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_PASSWORD=supersecret
      - REDIS_MASTER_PASSWORD=supersecret
    user: root
    volumes:
      - /home/vagrant/redis/data:/bitnami/redis/data
    networks:
      vpcbr:
        ipv4_address: 169.254.3.1

  redis-sentinel:
    image: docker.io/bitnami/redis-sentinel:5.0.4-debian-9-r39
    container_name: redis-sentinel
    restart: always
    depends_on:
      - consul-server
      - redis
    ports:
      - '0.0.0.0:26379:26379'
    environment:
      - REDIS_MASTER_HOST=${MASTER_HOSTIP}
      - REDIS_MASTER_SET=dc1
      - REDIS_MASTER_PASSWORD=supersecret
      # Number of milliseconds before master is declared down. Default: 60000.
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
      # Specifies the failover timeout in milliseconds. Default: 180000.
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=20000
    user: root
    volumes:
      - /home/vagrant/redis-sentinel/data:/bitnami/redis-sentinel/data
    networks:
      vpcbr:
        ipv4_address: 169.254.3.2

  redis-proxy:
    image: haproxy:lts-alpine
    container_name: redis-proxy
    restart: always
    depends_on:
      - "consul-server"
      - "redis"
      - "redis-proxy-template"
    # open up ports to bench only, this is not required in production if steateless communicates with haproxy within the same node.
    ports:
      - "0.0.0.0:16379:6379"
    volumes:
      - "./haproxy/${HOSTIP}:/usr/local/etc/haproxy:ro"
    networks:
      vpcbr:
        ipv4_address: 169.254.2.11

  redis-proxy-template:
    build:
      context: ./redis-proxy-template/
      dockerfile: Dockerfile
    image: redis-proxy-template-image
    container_name: redis-proxy-template
    restart: always
    depends_on:
      - "consul-server"
      - "redis-sentinel"
    volumes:
      - "./haproxy:/tmp"
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      CONSUL_HTTP_ADDR: http://169.254.1.1:8500
      REDIS_PASSWORD: supersecret
      REDIS_PORT_NUMBER: 6379
      REDIS_SLAVE_INGRESS_PORT_NUMBER: 6380
    command: >
      consul-template -template "/tmp/haproxy.ctmpl:/tmp/${HOSTIP}/haproxy.cfg:docker
      kill -s HUP redis-proxy"
    network_mode: "service:redis"

networks:
  vpcbr:
    driver: bridge
    ipam:
      config:
        - subnet: 169.254.0.0/16
          gateway: 169.254.1.1
